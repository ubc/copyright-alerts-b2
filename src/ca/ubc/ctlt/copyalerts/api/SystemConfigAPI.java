package ca.ubc.ctlt.copyalerts.api;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Date;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.helpers.TriggerUtils;
import org.quartz.impl.StdSchedulerFactory;

import ca.ubc.ctlt.copyalerts.SavedConfiguration;
import ca.ubc.ctlt.copyalerts.indexer.CSIndexJob;

import blackboard.cms.filesystem.CSContext;
import blackboard.cms.filesystem.CSDirectory;
import blackboard.cms.filesystem.CSEntry;
import blackboard.cms.filesystem.CSEntryMetadata;
import blackboard.cms.filesystem.CSFile;
import blackboard.platform.plugin.PlugInException;

public class SystemConfigAPI extends HttpServlet
{

	/** Autogenerated serial */
	private static final long serialVersionUID = 1738736327585377900L;
	
	private Scheduler scheduler;
	private SavedConfiguration config = new SavedConfiguration();

	/** 
	 * Convenience method that can be overridden to do stuff when this servlet gets placed into service.
	 */
	@Override
	public void init() throws ServletException
	{
		System.out.println("Start scheduling");
		// Blackboard uses a version of Quartz (1.3.3) so ancient that the official Quartz site NO LONGER HAS THE DOCUMENTATION AVAILABLE, WTF. And their 
		// messed up classloader interferes with me trying to load the latest version?!
		// 
		// Need a scheduler that can
		// * confine execution to a time period
		// * can resume execution after that time period
		// * can check to see if it's being executed in another thread somehow and won't try to run if it finds another version of itself running
		try
		{
			scheduler = StdSchedulerFactory.getDefaultScheduler();
			scheduler.start();
			// create a job
			JobDetail job = new JobDetail("job1", "group1", CSIndexJob.class);
			// create a trigger that runs every 60 seconds
			Trigger trigger = TriggerUtils.makeMinutelyTrigger(1);
			trigger.setStartTime(new Date());
			trigger.setName("trigger1");
			trigger.setGroup("group1");
			// combine job and trigger and run it
			scheduler.scheduleJob(job, trigger);

		} catch (SchedulerException e)
		{
			// TODO kill things nicely here somehow
			e.printStackTrace();
		}
	}

	/* (non-Javadoc)
	 * @see javax.servlet.GenericServlet#destroy()
	 */
	@Override
	public void destroy()
	{
		try
		{
			System.out.println("Shutting down scheduler");
			scheduler.shutdown(true);

			// Sleep for a bit so that we don't get any errors
			try
			{
				Thread.sleep(1000);
			} catch (InterruptedException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (SchedulerException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
	{
		/*
		System.out.println("Why not working?");
		CSContext ctx = CSContext.getContext();
		// Get a list of files to look for metadata on
		CSEntry root = ctx.findEntry("/courses/CL.UBC.MATH.101.201.2012W2.13204");
		CSDirectory dir = (CSDirectory) root; // we know it's a directory, so cast it
		System.out.println("ls directory: " + dir.getDirectoryContents().size());
		for (CSEntry e : dir.getDirectoryContents())
		{
			System.out.println(e.getFullPath());
			if (e instanceof CSFile)
			{
				System.out.println("Is File");
				CSFile f = (CSFile) e;
				CSEntryMetadata meta = f.getCSEntryMetadata();
				System.out.println("With Permission: " + meta.getStandardProperty("a_16e5ec38cbd34fd693afb019806a3901"));
				System.out.println("Fair Dealing: " + meta.getStandardProperty("a_2c3b588ee28a4cbab06b9867c094b533"));
				System.out.println("Public Domain: " + meta.getStandardProperty("a_24a6cd178f3d4495b3c67cf1ea805f9e"));
				System.out.println("Other: " + meta.getStandardProperty("a_b6072bc76cbf4458b3a8da39aeb8fd81"));
			}
		}
		  
		// pass on request to index.jsp
		RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/view/default.jsp");
		if (dispatcher != null) 
		{
			dispatcher.forward(request, response);
		}
		*/
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(config.toJson());
	}

	/**
	 * Save the new configuration settings
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		// read json response body, have to read this manually cause httpservlet doesn't support json, heh
		StringBuilder sb = new StringBuilder();
	    BufferedReader br = request.getReader();
	    String str = "";
	    while( (str = br.readLine()) != null ){
	        sb.append(str);
	    } 
	    
	    // parse the json string and save the new config
	    config.fromJson(sb.toString());
	    // return the new config to caller
	    doGet(request, response);
	}
	
}
